class Albus:
    def __init__(self):
        self.responses = {}

    def get_response(self, user_input):
        # Replace this logic with your actual response generation using GPT-3 or any other method
        response = "This is a sample response generated by Albus."
        print(response)
        self.collect_feedback(response)

    def collect_feedback(self, response):
        user_feedback = input("Was this response helpful? (Y/N): ").strip().lower()
        if user_feedback == 'y':
            self.record_feedback(response, 'upvote')
        elif user_feedback == 'n':
            self.record_feedback(response, 'downvote')
        else:
            print("Invalid input. Please enter 'Y' or 'N'.")

    def record_feedback(self, response, feedback):
        if response not in self.responses:
            self.responses[response] = {'upvotes': 0, 'downvotes': 0}
        
        if feedback == 'upvote':
            self.responses[response]['upvotes'] += 1
        elif feedback == 'downvote':
            self.responses[response]['downvotes'] += 1

    def show_feedback(self):
        print("Feedback Summary:")
        for response, feedback in self.responses.items():
            print(f"Response: {response}")
            print(f"Upvotes: {feedback['upvotes']}")
            print(f"Downvotes: {feedback['downvotes']}")
            print("-" * 20)


def main():
    albus = Albus()
    while True:
        user_input = input("You: ").strip().lower()
        if user_input == 'exit':
            break
        albus.get_response(user_input)
    albus.show_feedback()


if __name__ == "__main__":
    main()
